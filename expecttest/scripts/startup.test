#!/usr/bin/expect 

####################
## GLOBALS
####################
set host	192.168.254.62;
set login_id	veraserv;
set password 	trial;

set classpath	"/veraserve/voicexml/voxml-ng"
set path	"/veraserve/:/veraserve/lm:/veraserve/nuance/bin/i386-solaris/:/veraserve/tts:/veraserve/sipcall:/usr/bin:/veraserve/nuance/data";

#set prompt	"(%|#|$)";
#set prompt	"*$*";
set prompt	"*";

set timeout	60;

set ESCAPE	\003

####################
####################
   

proc telnet_login { host login_id password } {
     ## very generic login for telnet sessions
     
     global prompt;

     # perform login

     send "telnet $host\r";
     expect {
       timeout {puts "telnet session failed"; exit}
       "login: ";
     }
     
     send "$login_id\r";
     expect {
       timeout {puts "telnet login failed"; exit}
       "Password: ";
     }

     send "$password\r";
     expect {
       timeout {puts "telnet password failed"; exit}
       $prompt;
     }
}


proc do_login { } {
     ## generic login for this script

     global host login_id password path prompt classpath;

     telnet_login $host $login_id $password;
     
     send "export PATH=\$PATH:$path\r";
     expect *;

     send "export CLASSPATH=\$CLASSPATH:$classpath";
     expect *;
}

proc run_program { prog args } {
     ##caller must perform expect

    # run in the background
    send "nohup $prog $args&\r"
    expect *

    # tail nohup until we get a responce from prog
    send "tail -f ~/nohup.out\r"
}

####################################################
####################################################
# MAIN
####################################################
####################################################

#spawn a shell
spawn $env(SHELL);
expect $prompt;

#goto home dir.
send "cd\r";
expect $prompt;

#perform login
do_login

send ". ./profile"
expect *

# remove the old nohup.out
send "rm -f ~/nohup.out\r"
expect $prompt;

send "touch ~/nohup.out\r"
expect $prompt;

#######################################
####### resource-manager
#######################################

#run_program /veraserve/nuance/bin/i386-solaris/resource-manager
run_program resource-manager
expect {
  timeout {puts "ERROR: resource-manager timed out, exiting..."; exit;}
  "Now accepting server connections on UDP port*" {send "$ESCAPE\r"; expect $prompt;}
  eof {puts "Error: eof found, exiting..."; exit}
}
 

#######################################
####### nlmstart
#######################################


run_program nlmstart 
expect {
  timeout { puts "timeout"; exit}
  "Nuance License Manager ready*" {send "$ESCAPE\r"; expect $prompt;}
  eof {puts "eof found"; exit}
}



#######################################
####### compilation-server
#######################################

#run_program  compilation-server -package /home/tkeane/motxml/voxml-ng/N62Package/vmlinterp.us

run_program  compilation-server -package /veraserve/voicexml/voxml-ng/N62Package/vmlinterp.us
expect {
  timeout {puts "ERROR: compilation-server timed out, exiting..."; exit;}
  "Server ready to accept connections on port*" {send "$ESCAPE\r"; expect $prompt}
  eof {puts "Error: eof found, exiting..."; exit}
}


#######################################
####### recserver
#######################################

set timeout	300;

run_program recserver /veraserve/voicexml/voxml-ng/N62Package/vmlinterp.us
expect {
  timeout {puts "ERROR: recserver timed out, exiting..."; exit;}
  "Resource Manager connection successfully established." {send "$ESCAPE\r"; expect $prompt}
  eof {puts "Error: eof found, exiting..."; exit}
}



#######################################
####### nutts-speachify
#######################################

run_program nutts-speechify
expect {
  timeout {puts "ERROR: nutts-speachify timed out, exiting..."; exit;}
  "Server ready to accept connections on port*" {send "$ESCAPE\r"; expect $prompt}
  eof {puts "Error: eof found, exiting..."; exit}
}


#######################################
####### vsvoice
#######################################

run_program vsvoice
expect {
  timeout {puts "ERROR: vsvoice timed out, exiting..."; exit;}
  "Run..." {send "$ESCAPE\r"; expect $prompt}
  eof {puts "Error: eof found, exiting..."; exit}
  "*" {send "$ESCAPE\r"; expect $prompt}
}

exit

#######################################
####### recclientA
#######################################

run_program recclient -nthreads 12
expect {
  timeout {puts "ERROR: recclientA timed out, exiting..."; exit;}
  "recclient:  waiting for clients to connect on port*" {send "$ESCAPE\r"; expect $prompt}
  eof {puts "Error: eof found, exiting..."; exit}
}



#######################################
####### java
#######################################

run_program java -classpath node7.jar com.mot.icsd.voxml.framework.NodeMain Node.propsfile=generic.props
expect {
  timeout {puts "ERROR: java timed out, exiting..."; exit;}
  "*" {send "$ESCAPE\r"; expect $prompt}
  eof {puts "Error: eof found, exiting..."; exit}
}

#######################################
####### recclientB
#######################################

#give java a chance to catch up
sleep 30

set timeout 60

run_program echo "checking that recclient finishes initialization"
expect {
  timeout {puts "ERROR: recclientB timed out, exiting..."; exit;}
  "RCENGINE client * intialization completed*" {send "$ESCAPE\r"; expect $prompt;
  send "Speach programs have been started in sequence\r"; expect *;}
  eof {puts "Error: eof found, exiting..."; exit}
}
